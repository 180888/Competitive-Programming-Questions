/*  
Given a tree with N nodes and N-1 edges,
calculate the maximum sum of the node values
from root to any of the leaves without re-visiting any node.
*/
#include <bits/stdc++.h>
using namespace std;

vector<int> maxsum;

void dfs(int a[], vector<int> v[], int u, int parent)
{
	maxsum[u] = a[u - 1];
	int maximum = 0;

	for (int child : v[u]) {
		if (child == parent)
			continue;
		dfs(a, v, child, u);
		maximum = max(maximum, maxsum[child]);
	}
	maxsum[u] += maximum;
}
int max_val(int a[], vector<int> v[])
{
	dfs(a, v, 1, 0);
	return maxsum[1];
}
int main()
{
	vector<int> v[15];
  v[1].push_back(2), v[2].push_back(1);
	v[1].push_back(3), v[3].push_back(1);
	v[1].push_back(4), v[4].push_back(1);
	v[2].push_back(5), v[5].push_back(2);
	v[2].push_back(6), v[6].push_back(2);
	v[3].push_back(7), v[7].push_back(3);
	v[3].push_back(8), v[8].push_back(3);
	v[4].push_back(9), v[9].push_back(4);
	v[4].push_back(10), v[10].push_back(4);
	v[5].push_back(11), v[11].push_back(5);
	v[5].push_back(12), v[12].push_back(5);
	v[7].push_back(13), v[13].push_back(7);
	v[7].push_back(14), v[14].push_back(7);
  
	int a[] = { 10, 20, 30, 40, 50, 60, 70, 80, 90, 10, 11, 12, 13, 14 };
	dp = vector<int>(15,0);
	cout << max_val(a, v);
	return 0;
}
