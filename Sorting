#include<bits/stdc++.h>
using namespace std;
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int Bubble_sort(int arr[],int n)
{
    int counter=1;
    while(counter<n)
    {
        for(int i=0;i<n-counter;i++)
        {
            if(arr[i]>arr[i+1])
            {
                int temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
            }
        }
        counter++;
    }
    return 0;
}
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0; 
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void array_sort(int t)
{
    long long n,m,p,q;
    cin>>n>>m>>p>>q;
    vector<pair<int,string>>arr1;
    vector<pair<int,string>>arr2;
    vector<pair<int,string>>solution;
    for(int i=0;i<n;i++)
    {
        string s;
        cin>>s;
        int x;
        cin>>x;
        arr1.push_back({x,s});
        
    }
    for(int i=0;i<m;i++)
    {
        string s1;
        cin>>s1;
        int y;
        cin>>y;
        arr2.push_back({y,s1});
        
    }
    sort(arr1.begin(),arr1.end());
    sort(arr2.begin(),arr2.end());
    for(int i=0;i<p;i++)
    {
        solution.push_back({arr1[i].first,arr1[i].second});
        
    }
    for(int i=0;i<q;i++)
    {
        solution.push_back({arr2[i].first,arr2[i].second});
        
    }
    sort(solution.begin(),solution.end());
    for(auto it:solution)
    cout<<it.second<<" "<<endl;
    
}
signed problem(){
    long long t;
    cin>>t;
    for(int i=1;i<=t;i++)
    {
       array_sort(i);
        
    }
    return 0;
}


void Merge_sort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        Merge_sort(arr, l, m);
        Merge_sort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

int partition (int arr[], int low, int high)
{
    int pivot = arr[high];    
    int i = (low - 1);  
 
    for (int j = low; j <= high- 1; j++)
    {
        if (arr[j] <= pivot)
        {
            i++;  
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
void Quick_sort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
 
        Quick_sort(arr, low, pi - 1);
        Quick_sort(arr, pi + 1, high);
    }
}
void print_array(int arr[], int n)
{
    int i;
    for (i=0; i < n; i++)
        cout<<arr[i]<<" ";
    cout<<endl;
 
}
int main()
{
    int n;
    cout<<"Enter array size: ";
    cin>>n;
    int arr[n];
    cout<<"Enter array elements: ";
    for(int i=0;i<n;i++)
    cin>>arr[i];
    cout<<"Sorting using Bubble sort: ";
    Bubble_sort(arr,n);
    cout<<"Sorting using merge sort: ";
    Merge_sort(arr,0,n-1);
    cout<<"Sorting using Quick sort: ";
    Quick_sort(arr,0,n);
    cout<<"Sorting using problem statment: ";
    problem();
    print_array(arr,n);
    return 0;
}
